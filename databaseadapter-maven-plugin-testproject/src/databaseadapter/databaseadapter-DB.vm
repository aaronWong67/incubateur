#*
  *  This is a template that show how to create a unique Java class representing a set of tables. Useful in small projects.
  *  Columns of the table are represented by an inner enum in order to represent them as a type (e.g. in Map(s)).
  *#
package ${package};

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.text.StrSubstitutor;

/**
 * Represents the database to use in the application.
 *
 * <p>
 * Here can be find all tables with related columns available to the application.
 * </p>
 *
 * @author databaseadapter-maven-plugin
 */
@Generated(value="databaseadapter-maven-plugin")
public class ${className} {

#foreach ($table in ${tables})
#set($tableName = ${table.name.toLowerCase()})
	/**
	 * Represents table {@code ${table.name}}.
	 *
	 * <p>
	 * $!{table.remarks}
	 * </p>
	 */
	public static class ${tableName} {

		/**
		 * Contains the name of the table.
		 *
		 * <p>
		 * Can be used to format others {@code SQL}.
		 * </p>
		 */		
		public static final String TABLE_NAME = "${tableName}";
		
		/**
		 * Contains a preformatted {@code SELECT COUNT(*) FROM ${tableName}}.
		 */		
		public static final String SQL_SELECT_COUNT = "SELECT COUNT(*) FROM " + TABLE_NAME;

		/**
		 * Contains a preformatted {@code SELECT * FROM ${tableName}}.
		 */		
		public static final String SQL_SELECT_ALL = "SELECT * FROM " + TABLE_NAME;

		/**
		 * Contains a preformatted {@code DELETE FROM ${tableName}}.
		 */		
		public static final String SQL_DELETE = "DELETE FROM " + TABLE_NAME;
		
		/**
		 * Contains all columns found in table {@code ${table.name}}.
		 */
		public static enum Column {
#foreach ($column in ${table.columns})

			/**
			 * Represents column {@code ${column.name}} of table {@code ${table.name}}.
			 *
			 * <p>
			 * $!{column.remarks}
			 * </p>
			 */
			${column.name.toLowerCase()}#if ($foreach.hasNext),#{end}

#end
		};
		
		/**
		 * Returns a basic &quot;select&quot; {@code SQL} using only specified columns.
		 *
		 * @param columns an array of columns of table {@code ${table.name}}
		 * @return basic &quot;select&quot; {@code SQL} using only specified columns
		 */
		public static String newSelect(${tableName}.Column[] columns) {
			return new StringBuilder("SELECT ")
				.append(StringUtils.join(namesOf(columns), ", "))
				.append(" FROM ")
				.append(TABLE_NAME)
				.toString();
		}

		/**
		 * Returns an &quot;insert&quot; {@code SQL} using specified columns.
		 *
		 * @param columns an array of columns of table {@code ${table.name}}
		 * @return &quot;insert&quot; {@code SQL} using specified columns.
		 */
		public static String newInsert(${tableName}.Column[] columns) {
			return new StringBuilder("INSERT INTO ")
				.append(TABLE_NAME)
				.append("(")
				.append(StringUtils.join(namesOf(columns), ", "))
				.append(") VALUES (")
				.append(StringUtils.join(Collections.nCopies(columns.length, "?"), ", "))
				.append(")")
				.toString();
		}

		/**
		 * Returns an &quot;update&quot; {@code SQL} using specified columns in {@code SET} clause.
		 *
		 * @param columns an array of columns of table {@code ${table.name}}
		 * @return &quot;update&quot; {@code SQL} using specified columns.
		 */
		public static String newUpdate(${tableName}.Column[] columns) {
			return new StringBuilder("UPDATE ")
				.append(TABLE_NAME)
				.append(" SET ")
				.append(StringUtils.join(namesOf(columns, "${name} = ?"), ", "))
				.toString();
		}
		
		/**
		 * Returns the names of specified columns.
		 *
		 * @param columns an array of columns of table {@code ${table.name}}
		 * @return names of specified columns
		 */
		public static String[] namesOf(${tableName}.Column[] columns) {
			String[] cols = new String[columns.length];
			for (int i = 0; i < columns.length; i++) cols[i] = columns[i].name();
			return cols;
		}

		/**
		 * Returns the names of specified columns applying specified template.
		 * 
		 * <p>
		 * The template has to contain placeholder {@code name} to represent the column name. E.g.
		 * </p>
		 * <pre>
		 *     ${name} = ?
		 * </pre>
		 *
		 * @param columns an array of columns of table {@code ${table.name}}
		 * @param template a template ala {@link StrSubstitutor} of {@code commons-lang} library
		 * @return names of specified columns
		 */
		public static String[] namesOf(${tableName}.Column[] columns, String template) {
			Map<String, Object> map = new HashMap<String, Object>();
			String[] cols = new String[columns.length];
			for (int i = 0; i < columns.length; i++) {
				map.put("name", columns[i].name());
				cols[i] = StrSubstitutor.replace(template, map);
			}
			return cols;
		}
		
	}
	
#end

}